{"version":3,"sources":["components/AddCategory.tsx","components/GiFGridItem.tsx","helpers/getGifs.ts","components/GifGrid.tsx","hooks/useFetchGifs.ts","components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","GifGridItem","img","className","src","url","alt","title","getGifs","a","encodeURI","fetch","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","State","setState","useEffect","then","useFetchGifs","image","key","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAkCeA,EA3BsB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACtBC,mBAAS,IADa,mBACnDC,EADmD,KACvCC,EADuC,KAa1D,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAhBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCaZG,EAfsB,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAEtC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAIG,IAAKC,IAAKJ,EAAIK,QAC5B,2BAAIL,EAAIK,S,uBCVDC,EAAO,uCAAG,WAAOZ,GAAP,qBAAAa,EAAA,6DACfJ,EADe,iDACiCK,UAAUd,GAD3C,+DAESe,MAAMN,GAFf,8BAEqBO,OAFrB,uBAEbC,EAFa,EAEbA,KACFC,EAAOD,EAAKE,KAAI,SAACb,GAAD,MAAyB,CAC7Cc,GAAId,EAAIc,GACRT,MAAOL,EAAIK,MACXF,IAAKH,EAAIe,OAAOC,iBAAiBb,QANd,kBAUdS,GAVc,2CAAH,sDCiCLK,EA1BkB,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAAe,ECDvB,SAACA,GAAsB,IAAD,EACtBR,mBAAiB,CACzCyB,KAAM,GACNO,SAAS,IAHqC,mBACzCC,EADyC,KAClCC,EADkC,KAahD,OAPAC,qBAAU,WACRf,EAAQZ,GACL4B,MAAK,SAAAtB,GACJoB,EAAS,CAAET,KAAMX,EAAKkB,SAAS,SAElC,CAACxB,IAEGyB,EDV2BI,CAAa7B,GAAjCqB,EAFmC,EAEzCJ,KAAcO,EAF2B,EAE3BA,QACtB,OACE,oCACE,wBAAIjB,UAAU,qCAAqCP,GAClDwB,GAAW,uBAAGjB,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAGXc,EAAOF,KAAI,SAACW,GAAD,OACT,kBAAE,EAAF,CACEC,IAAKD,EAAMV,GACXd,IAAKwB,UEmBJE,EAjCuB,SAAC,GAA2C,IAAD,IAAxCC,yBAAwC,MAApB,CAAC,aAAmB,IAE3CzC,mBAASyC,GAFkC,mBAExEC,EAFwE,KAE5D3C,EAF4D,KAQ/E,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEI2C,EAAWf,KAAI,SAAAnB,GAAQ,OACrB,kBAAC,EAAD,CACE+B,IAAK/B,EACLA,SAAUA,UCzBxBmC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3a2bcbe1.chunk.js","sourcesContent":["import React, { ChangeEvent, Dispatch, FormEvent, SetStateAction, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Props {\r\n  setCategories: Dispatch<SetStateAction<string[]>>;\r\n}\r\n\r\nconst AddCategory: React.FC<Props> = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(category => [inputValue, ...category]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange} />\r\n    </ form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport { RespDataGiphy } from '../types/auxTypes';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Props {\r\n  img: Partial<RespDataGiphy>;\r\n}\r\n\r\nconst GifGridItem: React.FC<Props> = ({ img }) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={img.url} alt={img.title} />\r\n      <p>{img.title}</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  img: PropTypes.object.isRequired\r\n}\r\n\r\nexport default GifGridItem;\r\n\r\n\r\n","import { RespDataGiphy } from \"../types/auxTypes\";\r\n\r\n\r\nexport const getGifs = async (category: string) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=onfRWEU5er6mySKyfOqm8WXUfk70MTI2`;\r\n  const { data } = await (await fetch(url)).json();\r\n  const gifs = data.map((img: RespDataGiphy) => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images.downsized_medium.url\r\n  })\r\n  ) as Array<Partial<RespDataGiphy>>;\r\n\r\n  return gifs;\r\n}","import React from 'react';\r\nimport GifGridItem from './GiFGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { RespDataGiphy } from '../types/auxTypes';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Props {\r\n  category: string;\r\n}\r\n\r\nconst GifGrid: React.FC<Props> = ({ category }) => {\r\n\r\n  const { data: images, loading } = useFetchGifs(category);\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n\r\n        {\r\n          images.map((image: Partial<RespDataGiphy>) =>\r\n            < GifGridItem\r\n              key={image.id}\r\n              img={image} />\r\n          )\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { RespDataGiphy } from '../types/auxTypes';\r\n\r\ninterface IGiphy {\r\n  data: Partial<RespDataGiphy>[];\r\n  loading: boolean;\r\n}\r\n\r\nexport const useFetchGifs = (category: string) => {\r\n  const [State, setState] = useState<IGiphy>({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(img => {\r\n        setState({ data: img, loading: false })\r\n      })\r\n  }, [category]);\r\n\r\n  return State;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface Props {\r\n  defaultCategories?: string[];\r\n}\r\n\r\nconst GifExpertApp: React.FC<Props> = ({ defaultCategories = ['One punch'] }) => {\r\n\r\n  const [categories, setCategories] = useState(defaultCategories);\r\n  // const handleAdd = () => {\r\n  //   setCategories([...categories].concat('SaintSeiya'));\r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      <ol>\r\n        {\r\n          categories.map(category =>\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />)\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n  defaultCategories: PropTypes.array\r\n}\r\n\r\nexport default GifExpertApp;","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}